# მასივის ობიექტს ნუმპაის ბიბლიოთეკაში ჰქვია ndarray
import numpy as np

# ასევე შესაძლებელია სიის მაგივრად სხვა სტრუქტურის გამოყენებაც
arr = np.array([1, 2, 3, 4, 5])

print(arr)
print("-----------------------------------")
print(type(arr))
print("-----------------------------------")

# ინდექსაცია
print(arr[0])
print("-----------------------------------")


arr = np.array([[1,2,3,4,5], [6,7,8,9,10]])

print('მეორე ელემენტი პირველი row დან ', arr[0, 1])
print('მე 5 მეორე row დან ', arr[1, 4])


print("-----------------------------------")
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

# მესამე ელემენტი მეორე მასივიდან რომელიც პირველ მასიცშია
print(arr[0, 1, 2])
print("-----------------------------------")
# სლაისინგი
arr = np.array([1, 2, 3, 4, 5, 6, 7])

print(arr[1:5])
print("-----------------------------------")
# განზომილება
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])

print(arr.shape)
print("-----------------------------------")
# განზომილების შეცვლა
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

newarr = arr.reshape(4, 3)

print(newarr)
print("-----------------------------------")

# იტერაცია
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

for x in arr:
  print(x)



arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

# გაერთიანება ერთ მასივში

arr = np.concatenate((arr1, arr2))

print(arr)
print("-----------------------------------")

arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

# გაერთიანება თუმცა  სხვა წყობის მიხედვით
arr = np.stack((arr1, arr2), axis=1)

print(arr)
print("-----------------------------------")



# გაყოფა

arr = np.array([1, 2, 3, 4, 5, 6])

newarr = np.array_split(arr, 3)

print(newarr)


arr = np.array([1, 2, 3, 4, 5, 6])

newarr = np.array_split(arr, 3)

print(newarr[0])
print(newarr[1])
print(newarr[2])